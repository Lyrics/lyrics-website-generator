<noscript>
    <p>Sadly, but the search has to rely on JavaScript in order to function inside the browser.</p>
    <p>Please feel free to <a href="https://github.com/Lyrics/lyrics-database/archive/{{archiveLinkBranch}}.zip">download the database</a> or clone git repository git@github.com:Lyrics/lyrics-database.git, in case you’d like to search through it locally.</p>
</noscript>
<script>

/* Remove the above NOSCRIPT DOM element */
var noscriptNode = document.getElementsByTagName("noscript")[0];
noscriptNode.parentNode.removeChild(noscriptNode);
/* Remove this very SCRIPT DOM element */
var scriptNode = document.getElementsByTagName("script")[0];
scriptNode.parentNode.removeChild(scriptNode)

</script>

<div id="app"></div>

<script>

var appNode = document.getElementById("app");

var dBWebsitePrefix = "db";

function formatURL(input) {
    input = encodeURI(input).replace(/\?/g, "%3F");
    return dBWebsitePrefix + "/" + input + "/";
}

function getQueryVariable(variableName) {
    const params = new URLSearchParams(window.location.search);
    return params.get(variableName);
}

function reset() {
    appNode.innerHTML = "";
}

function displayLoading() {
    reset();

    var loadingNode = document.createElement("div");
    loadingNode.className = "loading";
    loadingNode.innerText = "Loading…";

    appNode.appendChild(loadingNode);
}

function displayError(reason) {
    reset();

    var errorNode = document.createElement("div");
    errorNode.className = "error";
    errorNode.innerText = reason;

    appNode.appendChild(errorNode);
}

function displayResults(items) {
    reset();

    var contentNode = document.createElement("div");
    contentNode.className = "content";

    if (items.length > 0) {
        var listNode = document.createElement("ul");
        listNode.className = "l";

        for (var i = 0; i < items.length; i++) {
            var item = items[i];

            var listItemNode = document.createElement("li");
            var listItemAnchorNode = document.createElement("a");

            listItemAnchorNode.className = "t4";
            listItemAnchorNode.innerText = item.split("/")[1] + " – " + item.split("/")[3];
            listItemAnchorNode.href = formatURL(item);

            listItemNode.appendChild(listItemAnchorNode);
            listNode.appendChild(listItemNode);
        }

        contentNode.appendChild(listNode);
    } else {
        var noResultsNode = document.createElement("p");
        noResultsNode.innerText = "No results";
        contentNode.appendChild(noResultsNode);
    }

    appNode.appendChild(contentNode);
}

function makeHttpRequest(url) {
    return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = processHttpResponse;
        xhr.open("GET", url);
        xhr.send();

        function processHttpResponse() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status == 200) {
                    resolve(JSON.parse(xhr.responseText));
                } else {
                    reject();
                }
            }
        }
  });
}

var queryString = getQueryVariable("q") || "";

/* Need to wait for the search field to be appended to the DOM tree */
setTimeout(() => document.forms[0].firstChild.lastChild.value = queryString);

/* Proceed to retrieving results from the server */
try {
    if (queryString.length > 0) {
        /* Put the loading indicator up */
        displayLoading();

        const obtainedKeywordGroups = [];
        const keywords = {};
        const matches = queryString.match(/\w+/g);
        var pathsIndexes = [];
        let requestCount = 0;

        matches.forEach(match => {
            const matchLowercase = match.toLowerCase();

            if (obtainedKeywordGroups.includes(matchLowercase[0])) {
                requestCount++; /* Count skipped requests */

                for (const keyword in keywords) {
                    if (keyword === matchLowercase) {
                        /* Discard previously found paths that don’t intersect with newly discovered paths */
                        if (pathsIndexes.length === 0) {
                            pathsIndexes = keywords[keyword];
                        } else {
                            pathsIndexes = keywords[keyword].filter(existingPathIndex => pathsIndexes.includes(existingPathIndex));
                        }
                        /* Make unique */
                        pathsIndexes = [...new Set(pathsIndexes)];
                    }
                }

                if (requestCount === matches.length) {
                    if (pathsIndexes.length > 0) {
                        makeHttpRequest(`/s.json`)
                            .then(pathsArray => displayResults(pathsIndexes.map(pi => pathsArray[pi])));
                    } else {
                        displayResults([]);
                    }
                }
            } else {
                makeHttpRequest(`/s/${matchLowercase[0]}.json`)
                    .then(newKeywords => {
                        for (newKeyword in newKeywords) {
                            keywords[newKeyword] = newKeywords[newKeyword];
                        }

                        obtainedKeywordGroups.push(matchLowercase[0]);

                        requestCount++;

                        for (const keyword in keywords) {
                            if (keyword === matchLowercase) {
                                /* Discard previously found paths that don’t intersect with newly discovered paths */
                                if (pathsIndexes.length === 0) {
                                    pathsIndexes = keywords[keyword];
                                } else {
                                    pathsIndexes = keywords[keyword].filter(existingPathIndex => pathsIndexes.includes(existingPathIndex));
                                }
                                /* Make unique */
                                pathsIndexes = [...new Set(pathsIndexes)];
                            }
                        }

                        if (requestCount === matches.length) {
                            if (pathsIndexes.length > 0) {
                                makeHttpRequest(`/s.json`)
                                    .then(pathsArray => displayResults(pathsIndexes.map(pi => pathsArray[pi])));
                            } else {
                                displayResults([]);
                            }
                        }
                    })
                    .catch(() => {
                        displayError("something went wrong");
                    });
            }
        });
    } else {
        throw new Error("query can’t be empty");
    }
} catch(error) {
    displayError(error);
}

</script>
